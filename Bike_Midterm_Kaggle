{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import explained_variance_score\n",
    "from sklearn import metrics\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = pd.read_csv(\"./data/ml_problems_13_train.csv\")\n",
    "test = pd.read_csv(\"./data/ml_problems_13_test.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>datetime</th>\n",
       "      <th>season</th>\n",
       "      <th>holiday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>weather</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>humidity</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>casual</th>\n",
       "      <th>registered</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2011-01-01 00:00:00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.84</td>\n",
       "      <td>14.395</td>\n",
       "      <td>81</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2011-01-01 01:00:00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.02</td>\n",
       "      <td>13.635</td>\n",
       "      <td>80</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8</td>\n",
       "      <td>32</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2011-01-01 02:00:00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.02</td>\n",
       "      <td>13.635</td>\n",
       "      <td>80</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5</td>\n",
       "      <td>27</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2011-01-01 03:00:00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.84</td>\n",
       "      <td>14.395</td>\n",
       "      <td>75</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2011-01-01 04:00:00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.84</td>\n",
       "      <td>14.395</td>\n",
       "      <td>75</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              datetime  season  holiday  workingday  weather  temp   atemp  \\\n",
       "0  2011-01-01 00:00:00       1        0           0        1  9.84  14.395   \n",
       "1  2011-01-01 01:00:00       1        0           0        1  9.02  13.635   \n",
       "2  2011-01-01 02:00:00       1        0           0        1  9.02  13.635   \n",
       "3  2011-01-01 03:00:00       1        0           0        1  9.84  14.395   \n",
       "4  2011-01-01 04:00:00       1        0           0        1  9.84  14.395   \n",
       "\n",
       "   humidity  windspeed  casual  registered  count  \n",
       "0        81        0.0       3          13     16  \n",
       "1        80        0.0       8          32     40  \n",
       "2        80        0.0       5          27     32  \n",
       "3        75        0.0       3          10     13  \n",
       "4        75        0.0       0           1      1  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "datetime       object\n",
       "season          int64\n",
       "holiday         int64\n",
       "workingday      int64\n",
       "weather         int64\n",
       "temp          float64\n",
       "atemp         float64\n",
       "humidity        int64\n",
       "windspeed     float64\n",
       "casual          int64\n",
       "registered      int64\n",
       "count           int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 8600 entries, 0 to 8599\n",
      "Data columns (total 12 columns):\n",
      " #   Column      Non-Null Count  Dtype  \n",
      "---  ------      --------------  -----  \n",
      " 0   datetime    8600 non-null   object \n",
      " 1   season      8600 non-null   int64  \n",
      " 2   holiday     8600 non-null   int64  \n",
      " 3   workingday  8600 non-null   int64  \n",
      " 4   weather     8600 non-null   int64  \n",
      " 5   temp        8600 non-null   float64\n",
      " 6   atemp       8600 non-null   float64\n",
      " 7   humidity    8600 non-null   int64  \n",
      " 8   windspeed   8600 non-null   float64\n",
      " 9   casual      8600 non-null   int64  \n",
      " 10  registered  8600 non-null   int64  \n",
      " 11  count       8600 non-null   int64  \n",
      "dtypes: float64(3), int64(8), object(1)\n",
      "memory usage: 806.4+ KB\n",
      "*************\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2286 entries, 0 to 2285\n",
      "Data columns (total 9 columns):\n",
      " #   Column      Non-Null Count  Dtype  \n",
      "---  ------      --------------  -----  \n",
      " 0   datetime    2286 non-null   object \n",
      " 1   season      2286 non-null   int64  \n",
      " 2   holiday     2286 non-null   int64  \n",
      " 3   workingday  2286 non-null   int64  \n",
      " 4   weather     2286 non-null   int64  \n",
      " 5   temp        2286 non-null   float64\n",
      " 6   atemp       2286 non-null   float64\n",
      " 7   humidity    2286 non-null   int64  \n",
      " 8   windspeed   2286 non-null   float64\n",
      "dtypes: float64(3), int64(5), object(1)\n",
      "memory usage: 160.9+ KB\n"
     ]
    }
   ],
   "source": [
    "train.info() ##查找是否有缺失值\n",
    "print('*************')\n",
    "test.info() ## 没有缺失值"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "datetime      0\n",
       "season        0\n",
       "holiday       0\n",
       "workingday    0\n",
       "weather       0\n",
       "temp          0\n",
       "atemp         0\n",
       "humidity      0\n",
       "windspeed     0\n",
       "casual        0\n",
       "registered    0\n",
       "count         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "datetime      0\n",
       "season        0\n",
       "holiday       0\n",
       "workingday    0\n",
       "weather       0\n",
       "temp          0\n",
       "atemp         0\n",
       "humidity      0\n",
       "windspeed     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>holiday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>weather</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>humidity</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>casual</th>\n",
       "      <th>registered</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>8600.000000</td>\n",
       "      <td>8600.000000</td>\n",
       "      <td>8600.000000</td>\n",
       "      <td>8600.00000</td>\n",
       "      <td>8600.000000</td>\n",
       "      <td>8600.000000</td>\n",
       "      <td>8600.000000</td>\n",
       "      <td>8600.000000</td>\n",
       "      <td>8600.000000</td>\n",
       "      <td>8600.000000</td>\n",
       "      <td>8600.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.505581</td>\n",
       "      <td>0.027791</td>\n",
       "      <td>0.682558</td>\n",
       "      <td>1.41000</td>\n",
       "      <td>20.119653</td>\n",
       "      <td>23.560989</td>\n",
       "      <td>61.590581</td>\n",
       "      <td>12.756693</td>\n",
       "      <td>35.689419</td>\n",
       "      <td>154.840814</td>\n",
       "      <td>190.530233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.116628</td>\n",
       "      <td>0.164382</td>\n",
       "      <td>0.465508</td>\n",
       "      <td>0.63234</td>\n",
       "      <td>8.000975</td>\n",
       "      <td>8.690173</td>\n",
       "      <td>19.468443</td>\n",
       "      <td>8.209822</td>\n",
       "      <td>49.571896</td>\n",
       "      <td>150.760096</td>\n",
       "      <td>180.631042</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>0.820000</td>\n",
       "      <td>0.760000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>13.940000</td>\n",
       "      <td>16.665000</td>\n",
       "      <td>46.000000</td>\n",
       "      <td>7.001500</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>36.000000</td>\n",
       "      <td>41.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>20.500000</td>\n",
       "      <td>24.240000</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>11.001400</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>118.000000</td>\n",
       "      <td>144.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.00000</td>\n",
       "      <td>27.060000</td>\n",
       "      <td>31.060000</td>\n",
       "      <td>78.000000</td>\n",
       "      <td>16.997900</td>\n",
       "      <td>48.000000</td>\n",
       "      <td>221.000000</td>\n",
       "      <td>282.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.00000</td>\n",
       "      <td>41.000000</td>\n",
       "      <td>45.455000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>56.996900</td>\n",
       "      <td>362.000000</td>\n",
       "      <td>886.000000</td>\n",
       "      <td>977.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            season      holiday   workingday     weather         temp  \\\n",
       "count  8600.000000  8600.000000  8600.000000  8600.00000  8600.000000   \n",
       "mean      2.505581     0.027791     0.682558     1.41000    20.119653   \n",
       "std       1.116628     0.164382     0.465508     0.63234     8.000975   \n",
       "min       1.000000     0.000000     0.000000     1.00000     0.820000   \n",
       "25%       2.000000     0.000000     0.000000     1.00000    13.940000   \n",
       "50%       3.000000     0.000000     1.000000     1.00000    20.500000   \n",
       "75%       4.000000     0.000000     1.000000     2.00000    27.060000   \n",
       "max       4.000000     1.000000     1.000000     4.00000    41.000000   \n",
       "\n",
       "             atemp     humidity    windspeed       casual   registered  \\\n",
       "count  8600.000000  8600.000000  8600.000000  8600.000000  8600.000000   \n",
       "mean     23.560989    61.590581    12.756693    35.689419   154.840814   \n",
       "std       8.690173    19.468443     8.209822    49.571896   150.760096   \n",
       "min       0.760000     0.000000     0.000000     0.000000     0.000000   \n",
       "25%      16.665000    46.000000     7.001500     4.000000    36.000000   \n",
       "50%      24.240000    61.000000    11.001400    16.000000   118.000000   \n",
       "75%      31.060000    78.000000    16.997900    48.000000   221.000000   \n",
       "max      45.455000   100.000000    56.996900   362.000000   886.000000   \n",
       "\n",
       "             count  \n",
       "count  8600.000000  \n",
       "mean    190.530233  \n",
       "std     180.631042  \n",
       "min       1.000000  \n",
       "25%      41.000000  \n",
       "50%     144.000000  \n",
       "75%     282.000000  \n",
       "max     977.000000  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.describe() ## check unusual value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>holiday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>weather</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>humidity</th>\n",
       "      <th>windspeed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2286.000000</td>\n",
       "      <td>2286.000000</td>\n",
       "      <td>2286.000000</td>\n",
       "      <td>2286.000000</td>\n",
       "      <td>2286.000000</td>\n",
       "      <td>2286.000000</td>\n",
       "      <td>2286.000000</td>\n",
       "      <td>2286.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.510499</td>\n",
       "      <td>0.031496</td>\n",
       "      <td>0.674541</td>\n",
       "      <td>1.450131</td>\n",
       "      <td>20.649221</td>\n",
       "      <td>24.009073</td>\n",
       "      <td>62.999563</td>\n",
       "      <td>12.960042</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.114701</td>\n",
       "      <td>0.174692</td>\n",
       "      <td>0.468649</td>\n",
       "      <td>0.638589</td>\n",
       "      <td>6.933237</td>\n",
       "      <td>7.600437</td>\n",
       "      <td>18.341652</td>\n",
       "      <td>7.991602</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.100000</td>\n",
       "      <td>6.060000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>15.580000</td>\n",
       "      <td>19.695000</td>\n",
       "      <td>49.000000</td>\n",
       "      <td>7.001500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>21.320000</td>\n",
       "      <td>24.240000</td>\n",
       "      <td>64.000000</td>\n",
       "      <td>12.998000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>25.420000</td>\n",
       "      <td>30.305000</td>\n",
       "      <td>77.000000</td>\n",
       "      <td>16.997900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>38.540000</td>\n",
       "      <td>43.940000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>50.002100</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            season      holiday   workingday      weather         temp  \\\n",
       "count  2286.000000  2286.000000  2286.000000  2286.000000  2286.000000   \n",
       "mean      2.510499     0.031496     0.674541     1.450131    20.649221   \n",
       "std       1.114701     0.174692     0.468649     0.638589     6.933237   \n",
       "min       1.000000     0.000000     0.000000     1.000000     4.100000   \n",
       "25%       2.000000     0.000000     0.000000     1.000000    15.580000   \n",
       "50%       3.000000     0.000000     1.000000     1.000000    21.320000   \n",
       "75%       4.000000     0.000000     1.000000     2.000000    25.420000   \n",
       "max       4.000000     1.000000     1.000000     3.000000    38.540000   \n",
       "\n",
       "             atemp     humidity    windspeed  \n",
       "count  2286.000000  2286.000000  2286.000000  \n",
       "mean     24.009073    62.999563    12.960042  \n",
       "std       7.600437    18.341652     7.991602  \n",
       "min       6.060000     8.000000     0.000000  \n",
       "25%      19.695000    49.000000     7.001500  \n",
       "50%      24.240000    64.000000    12.998000  \n",
       "75%      30.305000    77.000000    16.997900  \n",
       "max      43.940000   100.000000    50.002100  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Divide datetime element\n",
    "test.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "train['datetime'] = pd.to_datetime(train['datetime'])\n",
    "test['datetime'] = pd.to_datetime(test['datetime'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "train[\"year\"]=train[\"datetime\"].dt.year\n",
    "train[\"month\"]=train[\"datetime\"].dt.month\n",
    "train[\"day\"]=train[\"datetime\"].dt.day\n",
    "train[\"dayofweek\"]=train[\"datetime\"].dt.dayofweek\n",
    "train[\"hour\"]=train[\"datetime\"].dt.hour"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "test[\"year\"]=test[\"datetime\"].dt.year\n",
    "test[\"month\"]=test[\"datetime\"].dt.month\n",
    "test[\"day\"]=test[\"datetime\"].dt.day\n",
    "test[\"dayofweek\"]=test[\"datetime\"].dt.dayofweek\n",
    "test[\"hour\"]=test[\"datetime\"].dt.hour"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>holiday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>weather</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>humidity</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>casual</th>\n",
       "      <th>registered</th>\n",
       "      <th>count</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>day</th>\n",
       "      <th>dayofweek</th>\n",
       "      <th>hour</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.84</td>\n",
       "      <td>14.395</td>\n",
       "      <td>81</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>16</td>\n",
       "      <td>2011</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.02</td>\n",
       "      <td>13.635</td>\n",
       "      <td>80</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8</td>\n",
       "      <td>32</td>\n",
       "      <td>40</td>\n",
       "      <td>2011</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.02</td>\n",
       "      <td>13.635</td>\n",
       "      <td>80</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5</td>\n",
       "      <td>27</td>\n",
       "      <td>32</td>\n",
       "      <td>2011</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.84</td>\n",
       "      <td>14.395</td>\n",
       "      <td>75</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>13</td>\n",
       "      <td>2011</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.84</td>\n",
       "      <td>14.395</td>\n",
       "      <td>75</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2011</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   season  holiday  workingday  weather  temp   atemp  humidity  windspeed  \\\n",
       "0       1        0           0        1  9.84  14.395        81        0.0   \n",
       "1       1        0           0        1  9.02  13.635        80        0.0   \n",
       "2       1        0           0        1  9.02  13.635        80        0.0   \n",
       "3       1        0           0        1  9.84  14.395        75        0.0   \n",
       "4       1        0           0        1  9.84  14.395        75        0.0   \n",
       "\n",
       "   casual  registered  count  year  month  day  dayofweek  hour  \n",
       "0       3          13     16  2011      1    1          5     0  \n",
       "1       8          32     40  2011      1    1          5     1  \n",
       "2       5          27     32  2011      1    1          5     2  \n",
       "3       3          10     13  2011      1    1          5     3  \n",
       "4       0           1      1  2011      1    1          5     4  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train=train.drop(\"datetime\", axis = 1)\n",
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 8600 entries, 0 to 8599\n",
      "Data columns (total 16 columns):\n",
      " #   Column      Non-Null Count  Dtype  \n",
      "---  ------      --------------  -----  \n",
      " 0   season      8600 non-null   int64  \n",
      " 1   holiday     8600 non-null   int64  \n",
      " 2   workingday  8600 non-null   int64  \n",
      " 3   weather     8600 non-null   int64  \n",
      " 4   temp        8600 non-null   float64\n",
      " 5   atemp       8600 non-null   float64\n",
      " 6   humidity    8600 non-null   int64  \n",
      " 7   windspeed   8600 non-null   float64\n",
      " 8   casual      8600 non-null   int64  \n",
      " 9   registered  8600 non-null   int64  \n",
      " 10  count       8600 non-null   int64  \n",
      " 11  year        8600 non-null   int64  \n",
      " 12  month       8600 non-null   int64  \n",
      " 13  day         8600 non-null   int64  \n",
      " 14  dayofweek   8600 non-null   int64  \n",
      " 15  hour        8600 non-null   int64  \n",
      "dtypes: float64(3), int64(13)\n",
      "memory usage: 1.0 MB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "print(train.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "##Outlier detection\n",
    "from collections import Counter\n",
    "def detect_outliers(df,n,features):\n",
    "    \"\"\"\n",
    "    Takes a dataframe df of features and returns a list of the indices\n",
    "    corresponding to the observations containing more than n outliers according\n",
    "    to the Tukey method.\n",
    "    \"\"\"\n",
    "    outlier_indices = []\n",
    "    \n",
    "    # iterate over features(columns)\n",
    "    for col in features:\n",
    "        # 1st quartile (25%)\n",
    "        Q1 = np.percentile(df[col], 25)\n",
    "        # 3rd quartile (75%)\n",
    "        Q3 = np.percentile(df[col],75)\n",
    "        # Interquartile range (IQR)\n",
    "        IQR = Q3 - Q1\n",
    "        \n",
    "        # outlier step\n",
    "        outlier_step = 1.5 * IQR\n",
    "        \n",
    "        # Determine a list of indices of outliers for feature col\n",
    "        outlier_list_col = df[(df[col] < Q1 - outlier_step) | (df[col] > Q3 + outlier_step )].index\n",
    "        \n",
    "        # append the found outlier indices for col to the list of outlier indices \n",
    "        outlier_indices.extend(outlier_list_col)\n",
    "        \n",
    "    # select observations containing more than 2 outliers\n",
    "    outlier_indices = Counter(outlier_indices)        \n",
    "    multiple_outliers = list( k for k, v in outlier_indices.items() if v > n )\n",
    "    \n",
    "    return multiple_outliers   \n",
    "\n",
    "# detect outliers from Age, SibSp , Parch and Fare (train_data)\n",
    "Outliers_to_drop = detect_outliers(train,2,[\"season\", \"holiday\", \"workingday\", \"weather\", \"temp\", \"atemp\",\"humidity\",\"windspeed\",\"casual\", \"registered\", \"count\", \"year\", \"month\", \"day\", \"dayofweek\",\"hour\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 8600 entries, 0 to 8599\n",
      "Data columns (total 16 columns):\n",
      " #   Column      Non-Null Count  Dtype  \n",
      "---  ------      --------------  -----  \n",
      " 0   season      8600 non-null   int64  \n",
      " 1   holiday     8600 non-null   int64  \n",
      " 2   workingday  8600 non-null   int64  \n",
      " 3   weather     8600 non-null   int64  \n",
      " 4   temp        8600 non-null   float64\n",
      " 5   atemp       8600 non-null   float64\n",
      " 6   humidity    8600 non-null   int64  \n",
      " 7   windspeed   8600 non-null   float64\n",
      " 8   casual      8600 non-null   int64  \n",
      " 9   registered  8600 non-null   int64  \n",
      " 10  count       8600 non-null   int64  \n",
      " 11  year        8600 non-null   int64  \n",
      " 12  month       8600 non-null   int64  \n",
      " 13  day         8600 non-null   int64  \n",
      " 14  dayofweek   8600 non-null   int64  \n",
      " 15  hour        8600 non-null   int64  \n",
      "dtypes: float64(3), int64(13)\n",
      "memory usage: 1.0 MB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "31"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(Outliers_to_drop)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = train.drop(Outliers_to_drop, axis = 0).reset_index(drop=True) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 8569 entries, 0 to 8568\n",
      "Data columns (total 16 columns):\n",
      " #   Column      Non-Null Count  Dtype  \n",
      "---  ------      --------------  -----  \n",
      " 0   season      8569 non-null   int64  \n",
      " 1   holiday     8569 non-null   int64  \n",
      " 2   workingday  8569 non-null   int64  \n",
      " 3   weather     8569 non-null   int64  \n",
      " 4   temp        8569 non-null   float64\n",
      " 5   atemp       8569 non-null   float64\n",
      " 6   humidity    8569 non-null   int64  \n",
      " 7   windspeed   8569 non-null   float64\n",
      " 8   casual      8569 non-null   int64  \n",
      " 9   registered  8569 non-null   int64  \n",
      " 10  count       8569 non-null   int64  \n",
      " 11  year        8569 non-null   int64  \n",
      " 12  month       8569 non-null   int64  \n",
      " 13  day         8569 non-null   int64  \n",
      " 14  dayofweek   8569 non-null   int64  \n",
      " 15  hour        8569 non-null   int64  \n",
      "dtypes: float64(3), int64(13)\n",
      "memory usage: 1.0 MB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>holiday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>weather</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>humidity</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>casual</th>\n",
       "      <th>registered</th>\n",
       "      <th>count</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>day</th>\n",
       "      <th>dayofweek</th>\n",
       "      <th>hour</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>8569.000000</td>\n",
       "      <td>8569.000000</td>\n",
       "      <td>8569.000000</td>\n",
       "      <td>8569.000000</td>\n",
       "      <td>8569.000000</td>\n",
       "      <td>8569.000000</td>\n",
       "      <td>8569.000000</td>\n",
       "      <td>8569.000000</td>\n",
       "      <td>8569.000000</td>\n",
       "      <td>8569.000000</td>\n",
       "      <td>8569.000000</td>\n",
       "      <td>8569.000000</td>\n",
       "      <td>8569.000000</td>\n",
       "      <td>8569.000000</td>\n",
       "      <td>8569.000000</td>\n",
       "      <td>8569.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.505193</td>\n",
       "      <td>0.027891</td>\n",
       "      <td>0.681993</td>\n",
       "      <td>1.410900</td>\n",
       "      <td>20.092536</td>\n",
       "      <td>23.532178</td>\n",
       "      <td>61.664838</td>\n",
       "      <td>12.735271</td>\n",
       "      <td>35.290466</td>\n",
       "      <td>153.109931</td>\n",
       "      <td>188.400397</td>\n",
       "      <td>2011.499708</td>\n",
       "      <td>6.515696</td>\n",
       "      <td>7.991014</td>\n",
       "      <td>3.020306</td>\n",
       "      <td>11.520364</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.117722</td>\n",
       "      <td>0.164671</td>\n",
       "      <td>0.465729</td>\n",
       "      <td>0.632919</td>\n",
       "      <td>7.999360</td>\n",
       "      <td>8.689500</td>\n",
       "      <td>19.446368</td>\n",
       "      <td>8.190891</td>\n",
       "      <td>49.085274</td>\n",
       "      <td>148.097127</td>\n",
       "      <td>177.376729</td>\n",
       "      <td>0.500029</td>\n",
       "      <td>3.450465</td>\n",
       "      <td>4.322227</td>\n",
       "      <td>1.998262</td>\n",
       "      <td>6.920219</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.820000</td>\n",
       "      <td>0.760000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2011.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>13.940000</td>\n",
       "      <td>16.665000</td>\n",
       "      <td>46.000000</td>\n",
       "      <td>7.001500</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>41.000000</td>\n",
       "      <td>2011.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>20.500000</td>\n",
       "      <td>24.240000</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>11.001400</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>117.000000</td>\n",
       "      <td>143.000000</td>\n",
       "      <td>2011.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>12.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>27.060000</td>\n",
       "      <td>31.060000</td>\n",
       "      <td>78.000000</td>\n",
       "      <td>16.997900</td>\n",
       "      <td>48.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>281.000000</td>\n",
       "      <td>2012.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>18.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>41.000000</td>\n",
       "      <td>45.455000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>56.996900</td>\n",
       "      <td>362.000000</td>\n",
       "      <td>886.000000</td>\n",
       "      <td>977.000000</td>\n",
       "      <td>2012.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>23.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            season      holiday   workingday      weather         temp  \\\n",
       "count  8569.000000  8569.000000  8569.000000  8569.000000  8569.000000   \n",
       "mean      2.505193     0.027891     0.681993     1.410900    20.092536   \n",
       "std       1.117722     0.164671     0.465729     0.632919     7.999360   \n",
       "min       1.000000     0.000000     0.000000     1.000000     0.820000   \n",
       "25%       2.000000     0.000000     0.000000     1.000000    13.940000   \n",
       "50%       3.000000     0.000000     1.000000     1.000000    20.500000   \n",
       "75%       4.000000     0.000000     1.000000     2.000000    27.060000   \n",
       "max       4.000000     1.000000     1.000000     4.000000    41.000000   \n",
       "\n",
       "             atemp     humidity    windspeed       casual   registered  \\\n",
       "count  8569.000000  8569.000000  8569.000000  8569.000000  8569.000000   \n",
       "mean     23.532178    61.664838    12.735271    35.290466   153.109931   \n",
       "std       8.689500    19.446368     8.190891    49.085274   148.097127   \n",
       "min       0.760000     0.000000     0.000000     0.000000     0.000000   \n",
       "25%      16.665000    46.000000     7.001500     4.000000    35.000000   \n",
       "50%      24.240000    61.000000    11.001400    16.000000   117.000000   \n",
       "75%      31.060000    78.000000    16.997900    48.000000   220.000000   \n",
       "max      45.455000   100.000000    56.996900   362.000000   886.000000   \n",
       "\n",
       "             count         year        month          day    dayofweek  \\\n",
       "count  8569.000000  8569.000000  8569.000000  8569.000000  8569.000000   \n",
       "mean    188.400397  2011.499708     6.515696     7.991014     3.020306   \n",
       "std     177.376729     0.500029     3.450465     4.322227     1.998262   \n",
       "min       1.000000  2011.000000     1.000000     1.000000     0.000000   \n",
       "25%      41.000000  2011.000000     4.000000     4.000000     1.000000   \n",
       "50%     143.000000  2011.000000     7.000000     8.000000     3.000000   \n",
       "75%     281.000000  2012.000000    10.000000    12.000000     5.000000   \n",
       "max     977.000000  2012.000000    12.000000    15.000000     6.000000   \n",
       "\n",
       "              hour  \n",
       "count  8569.000000  \n",
       "mean     11.520364  \n",
       "std       6.920219  \n",
       "min       0.000000  \n",
       "25%       6.000000  \n",
       "50%      12.000000  \n",
       "75%      18.000000  \n",
       "max      23.000000  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a1fb4de50>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x864 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## check related feature for count\n",
    "colormap = plt.cm.RdBu\n",
    "plt.figure(figsize=(14,12))\n",
    "plt.title('Pearson Correlation of Features', y=1.05, size=15)\n",
    "sns.heatmap(train.corr(),linewidths=0.1,vmax=1.0, \n",
    "            square=True, cmap=colormap, linecolor='white', annot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8569, 16)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##Count has correlation with registered, casual, temp, atemp, hour, year, season, day, month. \n",
    "##Count has negative correlation with humidity, weather, dayofweek\n",
    "## Total is 15 features\n",
    "train.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Compare count number in 2011 and 2012\n",
    "plt.figure(figsize=(12,6))\n",
    "plt.hist(train['count'][train['year'] == 2011], alpha=0.5, label='2011')\n",
    "plt.hist(train['count'][train['year'] == 2012], alpha=0.5, label='2012', color='red')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "## 2012 has more rentals in 2012 than 2011"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set()\n",
    "plt.figure(figsize=(12,6))\n",
    "g = sns.kdeplot(train[\"casual\"][(train[\"year\"] == 2011)], color=\"Red\", shade = True)\n",
    "g = sns.kdeplot(train[\"casual\"][(train[\"year\"] == 2012)], ax =g, color=\"Blue\", shade= True)\n",
    "g.set_xlabel(\"casual\")\n",
    "g.set_ylabel(\"Frequency\")\n",
    "g = g.legend([\"2011\",\"2012\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set()\n",
    "plt.figure(figsize=(12,6))\n",
    "g = sns.kdeplot(train[\"registered\"][(train[\"year\"] == 2011)], color=\"red\", shade = True)\n",
    "g = sns.kdeplot(train[\"registered\"][(train[\"year\"] == 2012)], ax =g, color=\"Blue\", shade= True)\n",
    "g.set_xlabel(\"registered\")\n",
    "g.set_ylabel(\"Frequency\")\n",
    "g = g.legend([\"2011\",\"2012\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#temp - temperature in Celsius\n",
    "#atemp - \"feels like\" temperature in Celsius\n",
    "#temp & count\n",
    "plt.figure(figsize=(20,6))\n",
    "g = sns.lineplot(x=\"temp\", y ='count', data=train, hue='year', palette=\"deep\", err_style=None)\n",
    "##2012 rentals > 2011 in temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## atemp & count \n",
    "plt.figure(figsize=(20,6))\n",
    "g = sns.lineplot(x=\"atemp\", y ='count', data=train, hue='year', palette=\"deep\", err_style=None)\n",
    "##2012 rentals > 2011 in atemp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#year\n",
    "plt.figure(figsize=(10,4))\n",
    "g = sns.barplot(x=\"year\", y ='count', data=train, ci=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "##hour\n",
    "##Count has correlation with registered, casual, temp, atemp, hour, year, season, day, month. \n",
    "##Count has negative correlation with humidity, weather, dayofweek\n",
    "plt.figure(figsize=(20,6))\n",
    "g = sns.barplot(x=\"hour\", y ='count', data=train, ci=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#season\n",
    "plt.figure(figsize=(12,6))\n",
    "g = sns.barplot(x=\"season\", y ='count', data=train, ci=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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XSqVsnbt2vd9uyIAAHyS7fWe6uS9L4OZPn16twwEAAAHmr3aU71p06bs3r07xxxzTLcOBQAAB5Iu7anesGFDRo4cmUsuuSRjxozJBRdckPXr1//O57W0tGTUqFHZuHFjkqShoSG1tbUZMWJEFixY0PG4X/3qVxkzZkxqampy6623Zvfu3fv4ywEAgJ7XpaieM2dOrr766rz44otZvXp1rrvuuvzt3/7tRz5nzZo1GT9+fBobG5MkO3fuTF1dXe677748/vjjWbt2bZ555pkkyS233JLbbrstP/3pT1MqlVJfX1/sVwUAAD2oS1G9bdu2XHrppR23L7vssrzxxhsf+Zz6+vrMnj071dXVSZKXX345xxxzTAYPHpzKysrU1tZm5cqV2bRpU3bu3JnTTz89STJmzJj3fR06AAD0dl3aU71nz568+eabOeKII5Ik27dv/53Puf322993+/XXX09VVVXH7erq6jQ1NX3geFVVVZqamro0PAAA9AZdiuqvfe1r+dM//dNcdNFFqaioyOOPP54rr7xyr07U3t6eioqKjtulUikVFRWdHt9bAwcettfPga6oqjq83CPAh7I26c2sT3qr7lqbXYrqYcOG5cEHH0xbW1tee+21NDU1Zfjw4Xt1okGDBqW5ubnjdnNzc6qrqz9wfOvWrR1bRvbGtm0taW8v7fXz/pvf/HSmufntsp7f2qQz5V6bifVJ58q9Pq1NOlNkbfbpU9Hphdwu7ameMWNGJkyYkFtuuSV33nlnbr755tTV1e3VEKeddlpeffXVbNiwIXv27MmKFSsydOjQHH300enXr19Wr16dJHn00UczdOjQvXptAAAopy5dqX7jjTcyadKkJEm/fv0yefLkLF++fK9O1K9fv8ybNy833nhjWltbM2zYsFx44YVJkrvuuiuzZs1KS0tLTjnllI5zAQDAgaDL/1CxqakpRx55ZJL3tmiUSl3barFq1aqOn4cMGZLHHnvsA4856aST8sgjj3Tp9QAAoLfpUlRPnjw5l1xySb74xS+moqIiDQ0NvqYcAAD+ny5F9dixY/MHf/AH+cUvfpGDDjooV111VU488cTung0AAA4IXYrq5L0tGieddFJ3zgIAAAekLn36BwAA0DlRDQAABYlqAAAoSFQDAEBBohoAAAoS1QAAUJCoBgCAgkQ1AAAUJKoBAKAgUQ0AAAWJagAAKEhUAwBAQaIaAAAKEtUAAFCQqAYAgIJENQAAFCSqAQCgIFENAAAFiWoAAChIVAMAQEGiGgAAChLVAABQkKgGAICCRDUAABQkqgEAoCBRDQAABVX29Al/9KMf5eGHH+64vXHjxowePTrvvvtuVq9enUMPPTRJcsMNN2T48OE9PR4AAOy1Ho/qyy+/PJdffnmS5JVXXsn111+fG264IVdeeWUefvjhVFdX9/RIAABQSFm3f/zN3/xNpk2blkMPPTSbN29OXV1damtrs3DhwrS3t5dzNAAA6LKyRXVDQ0N27tyZiy66KFu3bs3ZZ5+duXPnpr6+Pi+99FIeeeSRco0GAAB7pce3f/y3H/7wh5kyZUqSZPDgwbn33ns77ps4cWKWL1+eK664osuvN3DgYft9RkiSqqrDyz0CfChrk97M+qS36q61WZao3rVrV1588cXMmzcvSbJu3bo0NjampqYmSVIqlVJZuXejbdvWkvb20j7P5Dc/nWlufrus57c26Uy512ZifdK5cq9Pa5POFFmbffpUdHohtyzbP9atW5djjz02/fv3T/JeRM+dOzc7duxIW1tblixZ4pM/AAA4YJTlSvVrr72WQYMGddw+6aSTcs0112T8+PHZvXt3RowYkVGjRpVjNAAA2GtlieqLL744F1988fuOTZgwIRMmTCjHOAAAUIhvVAQAgIJENQAAFCSqAQCgIFENAAAFiWoAAChIVAMAQEGiGgAAChLVAABQkKgGAICCRDUAABQkqgEAoCBRDQAABYlqAAAoSFQDAEBBohoAAAoS1QAAUJCoBgCAgkQ1AAAUJKoBAKAgUQ0AAAWJagAAKEhUAwBAQaIaAAAKEtUAAFCQqAYAgIJENQAAFCSqAQCgIFENAAAFiWoAAChIVAMAQEGV5TjpxIkTs3379lRWvnf6OXPm5De/+U3uv//+7N69O1deeWUmTJhQjtEAAGCv9XhUl0qlNDY25mc/+1lHVDc1NWXatGlZunRp+vbtm3HjxuWss87K8ccf39PjAQDAXuvxqP71r3+dJJk6dWrefPPNXHHFFRkwYEDOPvvsHHHEEUmSmpqarFy5MjfccENPjwcAAHutx/dUv/XWWxkyZEjuvffe/OM//mN++MMfZvPmzamqqup4THV1dZqamnp6NAAA2Cc9fqX6jDPOyBlnnNFxe+zYsbnjjjty3XXXdRwrlUqpqKjYq9cdOPCw/TYj/E9VVYeXewT4UNYmvZn1SW/VXWuzx6P6pZdeSltbW4YMGZLkvYA++uij09zc3PGY5ubmVFdX79XrbtvWkvb20j7P5Tc/nWlufrus57c26Uy512ZifdK5cq9Pa5POFFmbffpUdHoht8e3f7z99tuZP39+Wltb09LSkmXLluXOO+/M888/n+3bt+fdd9/Nk08+maFDh/b0aAAAsE96/Er1eeedlzVr1uSSSy5Je3t7vvrVr+aP/uiPMm3atEyaNCltbW0ZO3ZsTj311J4eDQAA9klZPqf65ptvzs033/y+Y7W1tamtrS3HOAAAUIhvVAQAgIJENQAAFCSqAQCgIFENAAAFiWoAAChIVAMAQEGiGgAAChLVAABQkKgGAICCRDUAABQkqgEAoCBRDQAABYlqAAAoSFQDAEBBohoAAAoS1QAAUJCoBgCAgkQ1AAAUJKoBAKAgUQ0AAAWJagAAKEhUAwBAQaIaAAAKEtUAAFCQqAYAgIJENQAAFCSqAQCgIFENAAAFiWoAAChIVAMAQEGV5TjpPffckyeeeCJJMmzYsEyfPj0zZ87M6tWrc+ihhyZJbrjhhgwfPrwc4wEAwF7p8ahuaGjIs88+m2XLlqWioiJXX311nnrqqaxduzYPP/xwqqure3okAAAopMe3f1RVVWXGjBnp27dvDj744Bx33HHZvHlzNm/enLq6utTW1mbhwoVpb2/v6dEAAGCf9HhUn3DCCTn99NOTJI2NjXniiSfyxS9+MWeffXbmzp2b+vr6vPTSS3nkkUd6ejQAANgnZdlTnSSvvPJKrr322kyfPj2/93u/l3vvvbfjvokTJ2b58uW54ooruvx6Awce1h1jQqqqDi/3CPChrE16M+uT3qq71mZZonr16tW56aabUldXl5EjR2bdunVpbGxMTU1NkqRUKqWycu9G27atJe3tpX2eyW9+OtPc/HZZz29t0plyr83E+qRz5V6f1iadKbI2+/Sp6PRCbo9v/9iyZUuuv/763HXXXRk5cmSS9yJ67ty52bFjR9ra2rJkyRKf/AEAwAGjx69UL1q0KK2trZk3b17HsXHjxuWaa67J+PHjs3v37owYMSKjRo3q6dEAAGCf9HhUz5o1K7NmzfrQ+yZMmNDD0wAAQHG+UREAAAoS1QAAUJCoBgCAgkQ1AAAUJKoBAKAgUQ0AAAWJagAAKEhUAwBAQaIaAAAKEtUAAFCQqAYAgIJENQAAFCSqAQCgIFENAAAFiWoAAChIVAMAQEGiGgAAChLVAABQkKgGAICCRDUAABQkqgEAoCBRDQAABYlqAAAoSFQDAEBBohoAAAoS1QAAUJCoBgCAgkQ1AAAUJKoBAKCgXhXVP/nJT3LxxRdnxIgRWbx4cbnHAQCALqks9wD/rampKQsWLMjSpUvTt2/fjBs3LmeddVaOP/74co8GAAAfqddcqW5oaMjZZ5+dI444Iv37909NTU1WrlxZ7rEAAOB36jVXql9//fVUVVV13K6urs7LL7/c5ef36VNReIbPfWZA4dfg42d/rK2i+n5qYLlHoBfqDWszST532GfLPQK9UG9Yn4d+znsnH1RkbX7UcytKpVJpn195P7r//vvT2tqam2++OUlSX1+ftWvXZs6cOWWeDAAAPlqv2f4xaNCgNDc3d9xubm5OdXV1GScCAICu6TVRfc455+T555/P9u3b8+677+bJJ5/M0KFDyz0WAAD8Tr1mT/WRRx6ZadOmZdKkSWlra8vYsWNz6qmnlnssAAD4nXrNnmoAADhQ9ZrtHwAAcKAS1QAAUJCoBgCAgkQ1AAAUJKoBAKAgUc37tLS0ZNSoUdm4cWO5R4EO99xzT0aOHJmRI0dm/vz55R4H3ucf/uEfcvHFF2fkyJF56KGHyj0OfMA3v/nNzJgxo9xjfOyJajqsWbMm48ePT2NjY7lHgQ4NDQ159tlns2zZsixfvjy//OUv89RTT5V7LEiSvPDCC/nFL36Rxx57LD/+8Y/z/e9/P7/+9a/LPRZ0eP7557Ns2bJyj/GJIKrpUF9fn9mzZ/t6eHqVqqqqzJgxI3379s3BBx+c4447Lps3by73WJAk+eM//uN873vfS2VlZbZt25Y9e/akf//+5R4LkiRvvvlmFixYkD//8z8v9yifCL3mGxUpv9tvv73cI8AHnHDCCR0/NzY25oknnsg//dM/lXEieL+DDz44CxcuzIMPPpgLL7wwRx55ZLlHgiTJbbfdlmnTpmXLli3lHuUTwZVq4IDwyiuvZOrUqZk+fXqOPfbYco8D73PTTTfl+eefz5YtW1JfX1/ucSA/+tGPctRRR2XIkCHlHuUTw5VqoNdbvXp1brrpptTV1WXkyJHlHgc6rF+/Prt27crJJ5+cQw89NCNGjMi6devKPRbk8ccfT3Nzc0aPHp0dO3bkt7/9bebOnZu6urpyj/axJaqBXm3Lli25/vrrs2DBAldc6HU2btyYhQsXdmxJevrpp3PZZZeVeSrI+z6JZunSpXnhhRcEdTcT1UCvtmjRorS2tmbevHkdx8aNG5fx48eXcSp4z7Bhw/Lyyy/nkksuyUEHHZQRI0b42xT4hKoolUqlcg8BAAAHMv9QEQAAChLVAABQkKgGAICCRDUAABQkqgEAoCBRDfAJNnXq1Gzfvj1Jcv755+c//uM/yjwRwIFJVAN8gj333HPlHgHgY0FUAxwARo8eneeffz5JsmLFivzhH/5hdu7cmSS59dZb893vfjdz587NpZdemq985SuZMWNGWlpakiQ/+9nPMm7cuIwZMyZf+tKX8vd///dJkpkzZyZJrrzyymzZsiVJsmTJko7HLViwoOP8q1atyuWXX55LLrkk48aNy7//+78nSb71rW/lqquuSm1tbf7qr/6qZ/5jAPRCvlER4AAwfPjw/Mu//EuGDBmSf/3Xf82nP/3pvPTSSzn33HPzzDPP5KijjspBBx2UpUuXpqKiInfffXfuuuuuzJ49Ow8++GDmzZuXY489Nk1NTTnvvPMyadKk3HHHHVm6dGm++93v5rOf/WySpF+/flm6dGmam5tz/vnnZ9y4cWltbc2CBQvyve99L5/5zGfyyiuvZMqUKXnyySeTJJs2bcqKFStSWemPFOCTyzsgwAFg+PDh+cY3vpHp06fnpZdeyuTJk/Pcc89lwIAB+fznP5+f//znefvtt9PQ0JAkaWtry8CBA1NRUZFvf/vb+fnPf54VK1Zk/fr1KZVKeffddz/0PKNGjUqSVFVV5XOf+1y2bduWNWvW5PXXX8/kyZM7HldRUZHf/OY3SZLTTz9dUAOfeN4FAQ4Av//7v5+2trY8/fTTOfbYY3Peeedl2rRpqaysTE1NTR599NHU1dVl2LBhSZJ33nknra2t+e1vf5tLL700F1xwQc4888xcdtll+ed//ueUSqUPPc//jOOKioqUSqW0t7dnyJAhHdtGkmTLli2prq7OU089lf79+3fvLx7gAGBPNcAB4oILLsjf/d3f5dxzz81xxx2XlpaW/OQnP8mIESPyJ3/yJ1m8eHF27dqV9vb2/PVf/3XuvvvubNiwIS0tLbn55ptz/vnn59/+7d86HpMkBx10UHbv3v2R5x0yZEiee+65rF+/PknyzDPP5Ctf+UrHnm4AXKkGOGAMHz48ixYtyjnnnJMkOeecc7Ju3bocddRR+Yu/+It885vfzKWXXpo9e/bk5JNPzowZM9K/f/986UtfykUXXZS+ffvmxBNPzPHHH58NGzbk85//fC688MJMnDgx3/rWtzo97/HHH585c+bkG9/4RkqlUiorK3P//fdnwIABPfVLB+j1Kkqd/R0gAADQJbZ/AABAQaIaAAAKEtUAAFCQqAYAgIJENQAAFCSqAQCgIFENAAAFiWoAACjo/wJPTBBJTxDHWgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#weather\n",
    "plt.figure(figsize=(12,6))\n",
    "g = sns.barplot(x=\"weather\", y ='count', data=train, ci=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#dayofweeks\n",
    "plt.figure(figsize=(12,6))\n",
    "g = sns.barplot(x=\"dayofweek\", y ='count', data=train, ci=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#day\n",
    "plt.figure(figsize=(15,6))\n",
    "g = sns.lineplot(x=\"day\", y ='count',data=train, hue='season', palette=\"muted\", err_style=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,6))\n",
    "g = sns.lineplot(x=\"hour\", y ='count',data=train, hue='dayofweek', palette=\"muted\", err_style=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>holiday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>weather</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>humidity</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>casual</th>\n",
       "      <th>registered</th>\n",
       "      <th>count</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>day</th>\n",
       "      <th>dayofweek</th>\n",
       "      <th>hour</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.84</td>\n",
       "      <td>14.395</td>\n",
       "      <td>81</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>16</td>\n",
       "      <td>2011</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.02</td>\n",
       "      <td>13.635</td>\n",
       "      <td>80</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8</td>\n",
       "      <td>32</td>\n",
       "      <td>40</td>\n",
       "      <td>2011</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.02</td>\n",
       "      <td>13.635</td>\n",
       "      <td>80</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5</td>\n",
       "      <td>27</td>\n",
       "      <td>32</td>\n",
       "      <td>2011</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.84</td>\n",
       "      <td>14.395</td>\n",
       "      <td>75</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>13</td>\n",
       "      <td>2011</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.84</td>\n",
       "      <td>14.395</td>\n",
       "      <td>75</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2011</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   season  holiday  workingday  weather  temp   atemp  humidity  windspeed  \\\n",
       "0       1        0           0        1  9.84  14.395        81        0.0   \n",
       "1       1        0           0        1  9.02  13.635        80        0.0   \n",
       "2       1        0           0        1  9.02  13.635        80        0.0   \n",
       "3       1        0           0        1  9.84  14.395        75        0.0   \n",
       "4       1        0           0        1  9.84  14.395        75        0.0   \n",
       "\n",
       "   casual  registered  count  year  month  day  dayofweek  hour  \n",
       "0       3          13     16  2011      1    1          5     0  \n",
       "1       8          32     40  2011      1    1          5     1  \n",
       "2       5          27     32  2011      1    1          5     2  \n",
       "3       3          10     13  2011      1    1          5     3  \n",
       "4       0           1      1  2011      1    1          5     4  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Modeling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = train.drop(['count', 'casual', 'registered'],axis=1)\n",
    "Y = train['count']\n",
    "\n",
    "X_train,X_test,Y_train,Y_test = train_test_split(X, Y, test_size=0.2,random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 6855 entries, 9 to 2732\n",
      "Data columns (total 13 columns):\n",
      " #   Column      Non-Null Count  Dtype  \n",
      "---  ------      --------------  -----  \n",
      " 0   season      6855 non-null   int64  \n",
      " 1   holiday     6855 non-null   int64  \n",
      " 2   workingday  6855 non-null   int64  \n",
      " 3   weather     6855 non-null   int64  \n",
      " 4   temp        6855 non-null   float64\n",
      " 5   atemp       6855 non-null   float64\n",
      " 6   humidity    6855 non-null   int64  \n",
      " 7   windspeed   6855 non-null   float64\n",
      " 8   year        6855 non-null   int64  \n",
      " 9   month       6855 non-null   int64  \n",
      " 10  day         6855 non-null   int64  \n",
      " 11  dayofweek   6855 non-null   int64  \n",
      " 12  hour        6855 non-null   int64  \n",
      "dtypes: float64(3), int64(10)\n",
      "memory usage: 749.8 KB\n"
     ]
    }
   ],
   "source": [
    "X_train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# y is predict value y_ is actual value\n",
    "def RMSLE(y, y_,convertExp=True):\n",
    "    if convertExp:\n",
    "        y = np.exp(y),\n",
    "        y_ = np.exp(y_)\n",
    "    log1 = np.nan_to_num(np.array([np.log(v + 1) for v in y]))\n",
    "    log2 = np.nan_to_num(np.array([np.log(v + 1) for v in y_]))\n",
    "    calc = (log1 - log2) ** 2\n",
    "    return np.sqrt(np.mean(calc))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Linear Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSLE Value For Linear Regression:  0.9759937854757472\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression,Ridge,Lasso\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn import metrics\n",
    "import warnings\n",
    "pd.options.mode.chained_assignment = None\n",
    "warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n",
    "\n",
    "# Initialize logistic regression model\n",
    "lModel = LinearRegression()\n",
    "\n",
    "# Train the model\n",
    "yLabelsLog = np.log1p(Y_train)\n",
    "lModel.fit(X_train, yLabelsLog)\n",
    "\n",
    "# Make predictions train data prediction\n",
    "preds = lModel.predict(X_train)\n",
    "print (\"RMSLE Value For Linear Regression: \", RMSLE(np.exp(yLabelsLog),np.exp(preds),False))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.4300073645386555\n"
     ]
    }
   ],
   "source": [
    "## test score\n",
    "lModel = LinearRegression()\n",
    "lModel.fit(X_test,Y_test)\n",
    "preds = lModel.predict(X_test)\n",
    "print(explained_variance_score(preds,Y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Ridge Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'alpha': 100, 'max_iter': 3000}\n",
      "RMSLE Value for Ridge Regression 0.9760446561541788\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn import metrics\n",
    "\n",
    "ridge = Ridge()\n",
    "\n",
    "ridge_params = {'max_iter':[3000],'alpha':[0.001,0.01,0.1,1,10,100,1000]}\n",
    "rmsle_scorer = metrics.make_scorer(RMSLE,greater_is_better=False)\n",
    "grid_ridge = GridSearchCV(ridge,ridge_params,scoring=rmsle_scorer,cv=5)\n",
    "\n",
    "yLabelsLog = np.log1p(Y_train)\n",
    "grid_ridge.fit(X_train, yLabelsLog)\n",
    "preds = grid_ridge.predict(X_train)\n",
    "print(grid_ridge.best_params_)\n",
    "print('RMSLE Value for Ridge Regression {}'.format(RMSLE(np.exp(yLabelsLog),np.exp(preds),False)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.4300081580727011\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_search.py:788: RuntimeWarning: invalid value encountered in subtract\n",
      "  array_means[:, np.newaxis]) ** 2,\n"
     ]
    }
   ],
   "source": [
    "grid_ridge.fit(X_test,Y_test)\n",
    "preds = grid_ridge.predict(X_test)\n",
    "print(explained_variance_score(preds,Y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lasso Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSLE Value for Lasso Regression 0.9760062002690344\n"
     ]
    }
   ],
   "source": [
    "lasso = Lasso()\n",
    "\n",
    "lasso_params = {'max_iter':[3000],'alpha':[0.001,0.01,0.1,1,10,100,1000]}\n",
    "grid_lasso = GridSearchCV(lasso,lasso_params,scoring=rmsle_scorer,cv=5)\n",
    "yLabelsLog = np.log1p(Y_train)\n",
    "grid_lasso.fit(X_train, yLabelsLog)\n",
    "preds = grid_lasso.predict(X_train)\n",
    "print('RMSLE Value for Lasso Regression {}'.format(RMSLE(np.exp(yLabelsLog),np.exp(preds),False)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.4300367318121354\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_search.py:788: RuntimeWarning: invalid value encountered in subtract\n",
      "  array_means[:, np.newaxis]) ** 2,\n"
     ]
    }
   ],
   "source": [
    "yLabelsLog = np.log1p(Y_test)\n",
    "grid_lasso.fit(X_test,Y_test)\n",
    "preds = grid_lasso.predict(X_test)\n",
    "print(explained_variance_score(preds,Y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# RandomForest Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSLE Value for RandomForest 0.1069967368874288\n",
      "*************************************************************\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9009242093701246\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_search.py:788: RuntimeWarning: invalid value encountered in subtract\n",
      "  array_means[:, np.newaxis]) ** 2,\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "rf = RandomForestRegressor()\n",
    "\n",
    "rf_params = {'n_estimators':[1,10,100]}\n",
    "grid_rf = GridSearchCV(rf,rf_params,scoring=rmsle_scorer,cv=5)\n",
    "\n",
    "#train data score\n",
    "yLabelsLog = np.log1p(Y_train)\n",
    "grid_rf.fit(X_train,yLabelsLog)\n",
    "preds = grid_rf.predict(X_train)\n",
    "print('RMSLE Value for RandomForest {}'.format(RMSLE(np.exp(yLabelsLog),np.exp(preds),False)))\n",
    "\n",
    "print('*************************************************************')\n",
    "## test score\n",
    "yLabelsLog = np.log1p(Y_test)\n",
    "grid_rf.fit(X_test,Y_test)\n",
    "preds = grid_rf.predict(X_test)\n",
    "print(explained_variance_score(preds,Y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# GradientBoosting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSLE Value for GradientBoosting 0.14915511002963852\n",
      "*************************************************************\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSLE Value for GradientBoosting 185.8616948210483\n",
      "-296.1947912546698\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py:679: RuntimeWarning: overflow encountered in exp\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  \"\"\"\n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in square\n",
      "  \n",
      "/Users/janeliu/opt/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_search.py:788: RuntimeWarning: invalid value encountered in subtract\n",
      "  array_means[:, np.newaxis]) ** 2,\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "\n",
    "gb = GradientBoostingRegressor()\n",
    "gb_params={'max_depth':range(1,11,1),'n_estimators':[1,10,100]}\n",
    "grid_gb=GridSearchCV(gb,gb_params,scoring=rmsle_scorer,cv=5)\n",
    "\n",
    "#train data score\n",
    "yLabelsLog = np.log1p(Y_train)\n",
    "grid_gb.fit(X_train,yLabelsLog)\n",
    "preds = grid_gb.predict(X_train)\n",
    "print('RMSLE Value for GradientBoosting {}'.format(RMSLE(np.exp(yLabelsLog),np.exp(preds),False)))\n",
    "\n",
    "print('*************************************************************')\n",
    "## test score\n",
    "yLabelsLog = np.log1p(Y_test)\n",
    "grid_gb.fit(X_test, Y_test)\n",
    "preds = grid_gb.predict(X_test)\n",
    "print('RMSLE Value for GradientBoosting {}'.format(RMSLE(np.exp(yLabelsLog),np.exp(preds),False)))\n",
    "print(explained_variance_score(preds,Y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# XGboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "import xgboost as xgb\n",
    "xg= xgb.XGBRegressor(n_estimators=4000, learning_rate=0.09, gamma=0, subsample=0.75,\n",
    "                           colsample_bytree=1, max_depth=7)## max_depth = 7 is the best #0.9591630003785118"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[17:58:47] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
       "             colsample_bynode=1, colsample_bytree=1, gamma=0,\n",
       "             importance_type='gain', learning_rate=0.09, max_delta_step=0,\n",
       "             max_depth=7, min_child_weight=1, missing=None, n_estimators=4000,\n",
       "             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,\n",
       "             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n",
       "             silent=None, subsample=0.75, verbosity=1)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xg.fit(X_train,Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9591630003785118\n"
     ]
    }
   ],
   "source": [
    "predictions = xg.predict(X_test)\n",
    "print(explained_variance_score(predictions,Y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[17:59:30] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "RMSLE Value for XGBoost 0.0008584610606560361\n",
      "************************************************\n",
      "[18:00:16] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "RMSLE Value for XGBoost 0.0006532526553037237\n"
     ]
    }
   ],
   "source": [
    "##training data MSE\n",
    "yLabelsLog = np.log1p(Y_train)\n",
    "xg.fit(X_train,yLabelsLog)\n",
    "preds = xg.predict(X_train)\n",
    "print('RMSLE Value for XGBoost {}'.format(RMSLE(np.exp(yLabelsLog),np.exp(preds),False)))\n",
    "\n",
    "print('************************************************')\n",
    "##testing data MSE\n",
    "yLabelsLog = np.log1p(Y_test)\n",
    "xg.fit(X_test,yLabelsLog)\n",
    "preds = xg.predict(X_test)\n",
    "print('RMSLE Value for XGBoost {}'.format(RMSLE(np.exp(yLabelsLog),np.exp(preds),False)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "# test for parameters \n",
    "# list = [0.01, 0.02, 0.03,0.04,0.05,0.06,0.07,0.08,0.09,1.0,1.1,1.2,1.3,1.4,1.5]\n",
    "# for i in list:\n",
    "#     xg= xgb.XGBRegressor(n_estimators=400, learning_rate=0.09, gamma=0, subsample=0.75,\n",
    "#                            colsample_bytree=1, max_depth=7)\n",
    "#     xg.fit(X_train,Y_train)\n",
    "#     predictions = xg.predict(X_test)\n",
    "#     print(i)\n",
    "#     print(explained_variance_score(predictions,Y_test)) # 0.9590322618865065"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_test =  test.drop(['datetime'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3.475655 , 3.038855 , 2.931387 , ..., 5.4095345, 5.1435227,\n",
       "       4.418531 ], dtype=float32)"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred = xg.predict(x_test)\n",
    "pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred1 = []\n",
    "for i in pred:\n",
    "    a = int(round(i))\n",
    "    pred1.append(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "submission = pd.DataFrame({\n",
    "        \"datetime\": test['datetime'],\n",
    "        \"count\": pred1\n",
    "    })\n",
    "submission.to_csv('bike_round.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>datetime</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2011-01-16 00:00:00</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2011-01-16 01:00:00</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2011-01-16 02:00:00</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2011-01-16 03:00:00</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2011-01-16 04:00:00</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              datetime  count\n",
       "0  2011-01-16 00:00:00      3\n",
       "1  2011-01-16 01:00:00      3\n",
       "2  2011-01-16 02:00:00      3\n",
       "3  2011-01-16 03:00:00      2\n",
       "4  2011-01-16 04:00:00      1"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('bike_round.csv')\n",
    "df.head()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
